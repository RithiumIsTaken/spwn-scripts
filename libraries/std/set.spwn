#[no_std, cache_output]

type @set
constants = import "constants.spwn"
extract constants.obj_props
extract import "util.spwn"

rot_vec = (x, y, r) => [x * $.cos(r) - y * $.sin(r), x * $.sin(r) + y * $.cos(r)]
rot = (x, y, cx, cy, r) {
    v = rot_vec(x - cx, y - cy, r)
    return [v[0] + cx, v[1] + cy]
}

impl @set {
    new: #[constructor, desc("Creates a new empty object set"), example(u"
        let object_set = @set::new()
    ")]
	() -> @set {
        return @set::{
            objects: []
        }
    },
    from: #[desc("Creates a new object set from am optional array of objects, with an optional center x and center y position"), example(u"
        let object_set = @set::from(objects=my_objects, center_x=30, center_y=15)
		//`@set::from(my_objects, 5, 10)` is also valid
    ", run_test = false)]
	(
        objects: [@object] = [],
        center_x: @number | @NULL = null,
        center_y: @number | @NULL = null,
    ) -> @set {
        if objects == [] { return @set::new() }

		let objects = objects
		for i in 0..objects.length {
			if !objects[i].has_key(X) { objects[i].set(X, 0) }
			if !objects[i].has_key(Y) { objects[i].set(Y, 0) }
		}

        let [center_x, center_y] = [center_x, center_y]
        if center_x == null {
            center_x = objects.sum(o => o[X]) / objects.length
        }
        if center_y == null {
            center_y = objects.sum(o => o[Y]) / objects.length
        }
        return @set::{
            objects: objects.map(o => o.with(X, o[X] - center_x).with(Y, o[Y] - center_y) )
        }
    },
	is_empty: #[desc("Returns true if this set contains no objects, otherwise false.")]
    (self) {
        return self.objects.is_empty();
    },
    push: #[desc("Adds a new object to the set")]
    (self, object: @object) {
        let to_push = object;
        $.append(self.objects, to_push)
    },
    map: #[desc("Calls a defined callback function on each object of the set, and returns a new set that contains the modified objects"), example(u"
		let shifted_objects = objects.map(o => o[obj_props.X] + 30)
	", run_test = false)]
	(
        self,
        cb: @object -> @object
    ) -> @set {
        return @set::from(
            self.objects.map( cb ),
            0,
            0,
        )
    },
    place: #[desc("Adds all objects in the set into the level, with a given X and Y offset position")]
	(
        self,
        x: @number,
        y: @number,
    ) -> @NULL {
        self.objects.map(o => $.add(
            o.with(X, o[X] + x).with(Y, o[Y] + y)
        ))
    },
    rotated: #[desc("Rotates every object in the set, returning a new set with the modified objects"), example(u"
		let rotated_objects = objects.rotated(90, around_x=30, around_y=30)
	", run_test = false)]
	(
        self,
        degrees: @number,
        around_x: @number = 0,
        around_y: @number = 0,
        lock: @bool = false,
    ) -> @set {
        return self.map(
            (o) {
                v = rot(o[X], o[Y], around_x, around_y, - 3.1415926535897932 / 180 * degrees)
                return o.with(X, v[0]).with(Y, v[1]).with(ROTATION, (o[ROTATION] if ROTATION in o else 0) + (degrees if !lock else 0))
            }
        )
    },
    with: #[desc("Adds or modifies the given prop and value pair for every object in the set, returning a new set with the modified objects")]
	(
        self,
        prop: @object_key | @number,
        value,
    ) -> @set {
        return self.map(
            o => o.with(prop, value)
        )
    },
    replace: #[desc("Replaces every object that has a specific prop value, with another specified value (or a fallback default value), returning a new set with the modified objects"), example(u"
		let replaced = objects.replace(obj_props.EDITOR_LAYER_1, ==1, 0, 1)
	", run_test = false)]
	(
        self,
        prop: @object_key | @number,
        pat: MATCHER,
        new,
        default,
    ) -> @set {
        return self.map(
            (o) {
                value = o[prop] if prop in o else default
                if matches(value, pat) {
                    return o.with(
                        prop,
                        ( new(value) if new is @macro else new )
                    )
                }
                return o
            }
        )
    },

    replace_group: #[desc("Replaces a given group with another given group, returning a new set with the modified objects")]
	(
        self,
        group: @group,
        new: @group,
    ) -> @set {
        return self.map(
            (o) => o.with(GROUPS, o[GROUPS].map(g => new if g == group else g)) if GROUPS in o else o
        )
    },
}


